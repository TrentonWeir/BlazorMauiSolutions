@page "/Recipt"

@using Data.Models;
@using System.Linq;
@using MonthlyReport.Shared.Components;
@inject Data.Services.CustomerService cs
@inject IJSRuntime js
<h3>NewReceipt</h3>

<div>
    <select class="form-select-lg">
        @foreach(var customer in customers)
        {
            <option value="@customer.Id">@customer.FistName @customer.LastName</option>
        }
    </select>
</div>
<section class="d-print-none">
    <div class="d-flex">
        <MudButton
            ButtonType="ButtonType.Button" OnClick="() => ToggleIconButton()"
        >
            @if (!isNewCustomer)
            {
                <MudIcon Icon="@Icons.Material.Outlined.Add" />
            }
            else
            {
                <MudIcon Icon="@Icons.Material.Outlined.Clear" />
            }
            New Customer 
        </MudButton>
    </div>
</section>
@if (isNewCustomer)
{
    <AddCustomerForm newCustomer="@newCustomer" SubmitNewCustomer="@SubmitCustomerAndSelect" />
}


<MudIconButton Icon="@Icons.Material.Filled.Print" 
    ButtonType="ButtonType.Button" Color="Color.Tertiary" 
    OnClick="() => Print()" />


@code {
    Customer newCustomer = new Customer();
    string Error = string.Empty;
    bool isNewCustomer = false;
    List<Customer> customers = new List<Customer>();
    MudSelect<Customer> mudSel = new MudBlazor.MudSelect<Customer>();
    void ToggleIconButton() => isNewCustomer = !isNewCustomer;
    protected override async Task OnInitializedAsync()
    {
        customers = await cs.GetCustomerAsync();
        customers = customers.OrderBy(x => x.LastName).ToList();
    }
    private async Task Print() => await js.InvokeVoidAsync("PrintInvoke");

    private void SubmitCustomerAndSelect()
    {
        cs.CreateUpdateCustomerAsync(newCustomer);
        ToggleIconButton();
    }

}
